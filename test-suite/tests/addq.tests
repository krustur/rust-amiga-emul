; ADDQ tests
; On PAR with Rust manual tests

:ADDQ_DATA_TO_DATA_REGISTER_DIRECT_BYTE

arrange_code
$00040000 5a 18

assert_code
> ADDQ.B #$5,(A0)+

arrange_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 00004000 000000a1 000000a2 000000a3 000000a4 000000a5 000000a6 000000a7
SR_FLAGS ENZOC

assert_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 00004001 000000a1 000000a2 000000a3 000000a4 000000a5 000000a6 000000a7
SR_FLAGS -----

arrange_mem
$00004000 10

assert_mem
$00004000 15

:ADDQ_DATA_TO_DATA_REGISTER_DIRECT_BYTE_OVERFLOW

arrange_code
$00040000 5a 18

assert_code
> ADDQ.B #$5,(A0)+

arrange_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 00004000 000000a1 000000a2 000000a3 000000a4 000000a5 000000a6 000000a7
SR_FLAGS ENZOC

assert_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 00004001 000000a1 000000a2 000000a3 000000a4 000000a5 000000a6 000000a7
SR_FLAGS -N-O-

arrange_mem
$00004000 7e

assert_mem
$00004000 83

:ADDQ_DATA_TO_DATA_REGISTER_DIRECT_WORD

arrange_code
$00040000 50 5b

assert_code
> ADDQ.W #$8,(A3)+

arrange_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 00004000 000000a1 000000a2 00004000 000000a4 000000a5 000000a6 000000a7
SR_FLAGS ENZOC

assert_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 00004000 000000a1 000000a2 00004002 000000a4 000000a5 000000a6 000000a7
SR_FLAGS -----

arrange_mem
$00004000 60 20

assert_mem
$00004000 60 28

:ADDQ_DATA_TO_DATA_REGISTER_DIRECT_WORD_CARRY

arrange_code
$00040000 56 5b

assert_code
> ADDQ.W #$3,(A3)+

arrange_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 00004000 000000a1 000000a2 00004000 000000a4 000000a5 000000a6 000000a7
SR_FLAGS ENZOC

assert_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 00004000 000000a1 000000a2 00004002 000000a4 000000a5 000000a6 000000a7
SR_FLAGS E---C

arrange_mem
$00004000 ff fe

assert_mem
$00004000 00 01

:ADDQ_DATA_TO_DATA_REGISTER_DIRECT_WORD_NEGATIVE

arrange_code
$00040000 56 5b

assert_code
> ADDQ.W #$3,(A3)+

arrange_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 00004000 000000a1 000000a2 00004000 000000a4 000000a5 000000a6 000000a7
SR_FLAGS EN-OC

assert_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 00004000 000000a1 000000a2 00004002 000000a4 000000a5 000000a6 000000a7
SR_FLAGS -N---

arrange_mem
$00004000 ff f0

assert_mem
$00004000 ff f3

:ADDQ_DATA_TO_DATA_REGISTER_DIRECT_LONG

arrange_code
$00040000 52 9d

assert_code
> ADDQ.L #$1,(A5)+

arrange_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 a0a0a0a0 a1a1a1a1 000000a2 a3a3a3a3 a4a4a4a4 00004000 000000a6 000000a7
SR_FLAGS ENZOC

assert_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 a0a0a0a0 a1a1a1a1 000000a2 a3a3a3a3 a4a4a4a4 00004004 000000a6 000000a7
SR_FLAGS -----

arrange_mem
$00004000 60 70 80 20

assert_mem
$00004000 60 70 80 21

:ADDQ_DATA_TO_DATA_REGISTER_DIRECT_LONG_ZERO

arrange_code
$00040000 50 9d

assert_code
> ADDQ.L #$8,(A5)+

arrange_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 a0a0a0a0 a1a1a1a1 000000a2 a3a3a3a3 a4a4a4a4 00004000 000000a6 000000a7
SR_FLAGS ENZOC

assert_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 a0a0a0a0 a1a1a1a1 000000a2 a3a3a3a3 a4a4a4a4 00004004 000000a6 000000a7
SR_FLAGS E-Z-C

arrange_mem
$00004000 ff ff ff f8

assert_mem
$00004000 00 00 00 00

:ADDQ_DATA_TO_ADDRESS_REGISTER_DIRECT_WORD

arrange_code
$00040000 50 48

assert_code
> ADDQ.W #$8,A0

arrange_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 fffffffe a1a1a1a1 000000a2 a3a3a3a3 a4a4a4a4 a5a5a5a5 000000a6 000000a7
SR_FLAGS -----

assert_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 00000006 a1a1a1a1 000000a2 a3a3a3a3 a4a4a4a4 a5a5a5a5 000000a6 000000a7
SR_FLAGS -----

:ADDQ_DATA_TO_ADDRESS_REGISTER_DIRECT_LONG

arrange_code
$00040000 50 89

assert_code
> ADDQ.L #$8,A1

arrange_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 a0a0a0a0 fffffffe 000000a2 a3a3a3a3 a4a4a4a4 a5a5a5a5 000000a6 000000a7
SR_FLAGS -----

assert_reg

D0 000000d0 000000d1 000000d2 000000d3 000000d4 000000d5 000000d6 00004344
A0 a0a0a0a0 00000006 000000a2 a3a3a3a3 a4a4a4a4 a5a5a5a5 000000a6 000000a7
SR_FLAGS -----


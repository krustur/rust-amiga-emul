; ----------------------T----------------------------------

; Path: ..\ami-test-runner\src\tests\aslr.s
; This file is autogenerated

 ;rts in case this source is run by mistake
 rts

;===========================================

asl_b_register_by_immediate_cx_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_b_register_by_immediate_cx_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000005,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $000c ; -NZ--

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $ED,$00

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000040,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0013 ; SR=E--OC

.assert_code
 ASL.B #$06,D0

;===========================================

asl_b_register_by_immediate_cx_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_b_register_by_immediate_cx_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000001,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $ED,$00

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000040,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASL.B #$06,D0

;===========================================

asl_b_register_by_immediate_n_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_b_register_by_immediate_n_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000002,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0015 ; E-Z-C

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $ED,$00

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $000a ; SR=-N-O-

.assert_code
 ASL.B #$06,D0

;===========================================

asl_b_register_by_immediate_n_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_b_register_by_immediate_n_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000005
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E5,$07

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000014
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASL.B #$02,D7

;===========================================

asl_b_register_by_immediate_z_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_b_register_by_immediate_z_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000c0
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0008 ; -N---

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E5,$07

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000000
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0017 ; SR=E-ZOC

.assert_code
 ASL.B #$02,D7

;===========================================

asl_b_register_by_immediate_z_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_b_register_by_immediate_z_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000001
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E5,$07

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000004
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASL.B #$02,D7

;===========================================

asl_b_register_by_immediate_v_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_b_register_by_immediate_v_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000040
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0019 ; EN--C

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E7,$07

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000000
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0006 ; SR=--ZO-

.assert_code
 ASL.B #$03,D7

;===========================================

asl_b_register_by_immediate_v_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_b_register_by_immediate_v_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000008
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E7,$07

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000040
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASL.B #$03,D7

;===========================================

asr_b_register_by_immediate_cx_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_b_register_by_immediate_cx_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$0000000c
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $000e ; -NZO-

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$07

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000001
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0011 ; SR=E---C

.assert_code
 ASR.B #$03,D7

;===========================================

asr_b_register_by_immediate_cx_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_b_register_by_immediate_cx_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000078
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$07

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$0000000f
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.B #$03,D7

;===========================================

asr_b_register_by_immediate_n_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_b_register_by_immediate_n_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000c0
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0017 ; E-ZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$07

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000f8
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0008 ; SR=-N---

.assert_code
 ASR.B #$03,D7

;===========================================

asr_b_register_by_immediate_n_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_b_register_by_immediate_n_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000070
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$07

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$0000000e
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.B #$03,D7

;===========================================

asr_b_register_by_immediate_z_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_b_register_by_immediate_z_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000007
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $000a ; -N-O-

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$07

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000000
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0015 ; SR=E-Z-C

.assert_code
 ASR.B #$03,D7

;===========================================

asr_b_register_by_immediate_z_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_b_register_by_immediate_z_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000008
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$07

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000001
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.B #$03,D7

;===========================================

asr_b_register_by_immediate_v_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_b_register_by_immediate_v_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000018
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$07

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000003
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.B #$03,D7

;===========================================

asl_w_register_by_immediate_cx_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_w_register_by_immediate_cx_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000505,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $000c ; -NZ--

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $ED,$40

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00004140,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0013 ; SR=E--OC

.assert_code
 ASL.W #$06,D0

;===========================================

asl_w_register_by_immediate_cx_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_w_register_by_immediate_cx_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000101,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $ED,$40

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00004040,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASL.W #$06,D0

;===========================================

asl_w_register_by_immediate_n_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_w_register_by_immediate_n_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000202,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0015 ; E-Z-C

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $ED,$40

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00008080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $000a ; SR=-N-O-

.assert_code
 ASL.W #$06,D0

;===========================================

asl_w_register_by_immediate_n_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_w_register_by_immediate_n_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000505
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E5,$47

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00001414
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASL.W #$02,D7

;===========================================

asl_w_register_by_immediate_z_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_w_register_by_immediate_z_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$0000c000
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0008 ; -N---

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E5,$47

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000000
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0017 ; SR=E-ZOC

.assert_code
 ASL.W #$02,D7

;===========================================

asl_w_register_by_immediate_z_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_w_register_by_immediate_z_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000101
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E5,$47

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000404
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASL.W #$02,D7

;===========================================

asl_w_register_by_immediate_v_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_w_register_by_immediate_v_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00004000
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0019 ; EN--C

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E7,$47

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000000
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0006 ; SR=--ZO-

.assert_code
 ASL.W #$03,D7

;===========================================

asl_w_register_by_immediate_v_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_w_register_by_immediate_v_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000808
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E7,$47

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00004040
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASL.W #$03,D7

;===========================================

asr_w_register_by_immediate_cx_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_w_register_by_immediate_cx_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000c0c
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $000e ; -NZO-

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$47

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000181
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0011 ; SR=E---C

.assert_code
 ASR.W #$03,D7

;===========================================

asr_w_register_by_immediate_cx_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_w_register_by_immediate_cx_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00007878
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$47

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000f0f
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.W #$03,D7

;===========================================

asr_w_register_by_immediate_n_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_w_register_by_immediate_n_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$0000c0c0
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0017 ; E-ZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$47

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$0000f818
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0008 ; SR=-N---

.assert_code
 ASR.W #$03,D7

;===========================================

asr_w_register_by_immediate_n_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_w_register_by_immediate_n_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00007070
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$47

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000e0e
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.W #$03,D7

;===========================================

asr_w_register_by_immediate_z_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_w_register_by_immediate_z_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000007
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $000a ; -N-O-

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$47

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000000
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0015 ; SR=E-Z-C

.assert_code
 ASR.W #$03,D7

;===========================================

asr_w_register_by_immediate_z_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_w_register_by_immediate_z_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000808
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$47

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000101
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.W #$03,D7

;===========================================

asr_w_register_by_immediate_v_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_w_register_by_immediate_v_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00001818
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$47

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000303
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.W #$03,D7

;===========================================

asl_l_register_by_immediate_cx_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_l_register_by_immediate_cx_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $05050505,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $000c ; -NZ--

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $ED,$80

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $41414140,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0013 ; SR=E--OC

.assert_code
 ASL.L #$06,D0

;===========================================

asl_l_register_by_immediate_cx_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_l_register_by_immediate_cx_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $01010101,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $ED,$80

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $40404040,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASL.L #$06,D0

;===========================================

asl_l_register_by_immediate_n_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_l_register_by_immediate_n_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $02020202,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0015 ; E-Z-C

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $ED,$80

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $80808080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $000a ; SR=-N-O-

.assert_code
 ASL.L #$06,D0

;===========================================

asl_l_register_by_immediate_n_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_l_register_by_immediate_n_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$05050505
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E5,$87

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$14141414
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASL.L #$02,D7

;===========================================

asl_l_register_by_immediate_z_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_l_register_by_immediate_z_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$c0000000
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0008 ; -N---

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E5,$87

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000000
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0017 ; SR=E-ZOC

.assert_code
 ASL.L #$02,D7

;===========================================

asl_l_register_by_immediate_z_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_l_register_by_immediate_z_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$01010101
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E5,$87

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$04040404
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASL.L #$02,D7

;===========================================

asl_l_register_by_immediate_v_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_l_register_by_immediate_v_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$40000000
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0019 ; EN--C

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E7,$87

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000000
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0006 ; SR=--ZO-

.assert_code
 ASL.L #$03,D7

;===========================================

asl_l_register_by_immediate_v_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_l_register_by_immediate_v_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$08080808
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E7,$87

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$40404040
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASL.L #$03,D7

;===========================================

asr_l_register_by_immediate_cx_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_l_register_by_immediate_cx_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$0c0c0c0c
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $000e ; -NZO-

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$87

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$01818181
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0011 ; SR=E---C

.assert_code
 ASR.L #$03,D7

;===========================================

asr_l_register_by_immediate_cx_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_l_register_by_immediate_cx_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$78787878
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$87

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$0f0f0f0f
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.L #$03,D7

;===========================================

asr_l_register_by_immediate_n_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_l_register_by_immediate_n_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$c0c0c0c0
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0017 ; E-ZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$87

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$f8181818
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0008 ; SR=-N---

.assert_code
 ASR.L #$03,D7

;===========================================

asr_l_register_by_immediate_n_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_l_register_by_immediate_n_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$70707070
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$87

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$0e0e0e0e
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.L #$03,D7

;===========================================

asr_l_register_by_immediate_z_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_l_register_by_immediate_z_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000007
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $000a ; -N-O-

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$87

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$00000000
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0015 ; SR=E-Z-C

.assert_code
 ASR.L #$03,D7

;===========================================

asr_l_register_by_immediate_z_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_l_register_by_immediate_z_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$08080808
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$87

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$01010101
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.L #$03,D7

;===========================================

asr_l_register_by_immediate_v_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_l_register_by_immediate_v_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$18181818
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E6,$87

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000080,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$03030303
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.L #$03,D7

;===========================================

asl_b_register_by_register_cx_shift_0_c_clear_x_unaffected_still_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_b_register_by_register_cx_shift_0_c_clear_x_unaffected_still_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffffc0,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0017 ; E-ZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E1,$25

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffffc0,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0018 ; SR=EN---

.assert_code
 ASL.B D0,D5

;===========================================

asl_b_register_by_register_cx_shift_0_c_clear_x_unaffected_still_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_b_register_by_register_cx_shift_0_c_clear_x_unaffected_still_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffffc0,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0007 ; --ZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E1,$25

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffffc0,$000000d1,$000000d2,$000000d3,$000000d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0008 ; SR=-N---

.assert_code
 ASL.B D0,D5

;===========================================

asr_b_register_by_register_cx_shift_0_c_clear_x_unaffected_still_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_b_register_by_register_cx_shift_0_c_clear_x_unaffected_still_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffffc0,$000000d2,$000000d3,$00000014,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E2,$24

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffffc0,$000000d2,$000000d3,$00000014,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0010 ; SR=E----

.assert_code
 ASR.B D1,D4

;===========================================

asr_b_register_by_register_cx_shift_0_c_clear_x_unaffected_still_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_b_register_by_register_cx_shift_0_c_clear_x_unaffected_still_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffffc0,$000000d2,$000000d3,$00000014,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $000f ; -NZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E2,$24

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffffc0,$000000d2,$000000d3,$00000014,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.B D1,D4

;===========================================

asl_w_register_by_register_cx_shift_0_c_clear_x_unaffected_still_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_w_register_by_register_cx_shift_0_c_clear_x_unaffected_still_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffffc0,$000000d1,$000000d2,$000000d3,$000000d4,$0000d5d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0017 ; E-ZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E1,$65

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffffc0,$000000d1,$000000d2,$000000d3,$000000d4,$0000d5d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0018 ; SR=EN---

.assert_code
 ASL.W D0,D5

;===========================================

asl_w_register_by_register_cx_shift_0_c_clear_x_unaffected_still_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_w_register_by_register_cx_shift_0_c_clear_x_unaffected_still_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffffc0,$000000d1,$000000d2,$000000d3,$000000d4,$0000d5d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0007 ; --ZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E1,$65

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffffc0,$000000d1,$000000d2,$000000d3,$000000d4,$0000d5d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0008 ; SR=-N---

.assert_code
 ASL.W D0,D5

;===========================================

asr_w_register_by_register_cx_shift_0_c_clear_x_unaffected_still_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_w_register_by_register_cx_shift_0_c_clear_x_unaffected_still_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffffc0,$000000d2,$000000d3,$000014d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E2,$64

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffffc0,$000000d2,$000000d3,$000014d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0010 ; SR=E----

.assert_code
 ASR.W D1,D4

;===========================================

asr_w_register_by_register_cx_shift_0_c_clear_x_unaffected_still_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_w_register_by_register_cx_shift_0_c_clear_x_unaffected_still_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffffc0,$000000d2,$000000d3,$000014d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $000f ; -NZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E2,$64

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffffc0,$000000d2,$000000d3,$000014d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.W D1,D4

;===========================================

asl_l_register_by_register_cx_shift_0_c_clear_x_unaffected_still_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_l_register_by_register_cx_shift_0_c_clear_x_unaffected_still_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffffc0,$000000d1,$000000d2,$000000d3,$000000d4,$d5d5d5d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0017 ; E-ZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E1,$A5

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffffc0,$000000d1,$000000d2,$000000d3,$000000d4,$d5d5d5d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0018 ; SR=EN---

.assert_code
 ASL.L D0,D5

;===========================================

asl_l_register_by_register_cx_shift_0_c_clear_x_unaffected_still_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_l_register_by_register_cx_shift_0_c_clear_x_unaffected_still_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffffc0,$000000d1,$000000d2,$000000d3,$000000d4,$d5d5d5d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0007 ; --ZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E1,$A5

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffffc0,$000000d1,$000000d2,$000000d3,$000000d4,$d5d5d5d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0008 ; SR=-N---

.assert_code
 ASL.L D0,D5

;===========================================

asr_l_register_by_register_cx_shift_0_c_clear_x_unaffected_still_set
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_l_register_by_register_cx_shift_0_c_clear_x_unaffected_still_set",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffffc0,$000000d2,$000000d3,$14d4d4d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E2,$A4

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffffc0,$000000d2,$000000d3,$14d4d4d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0010 ; SR=E----

.assert_code
 ASR.L D1,D4

;===========================================

asr_l_register_by_register_cx_shift_0_c_clear_x_unaffected_still_clear
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_l_register_by_register_cx_shift_0_c_clear_x_unaffected_still_clear",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffffc0,$000000d2,$000000d3,$14d4d4d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $000f ; -NZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E2,$A4

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffffc0,$000000d2,$000000d3,$14d4d4d4,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.L D1,D4

;===========================================

asl_b_register_by_register_big_shift
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_b_register_by_register_big_shift",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffff3f,$000000d1,$000000d2,$000000d3,$000000d4,$000000ff,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0019 ; EN--C

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E1,$25

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffff3f,$000000d1,$000000d2,$000000d3,$000000d4,$00000000,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0006 ; SR=--ZO-

.assert_code
 ASL.B D0,D5

;===========================================

asr_b_register_by_register_big_shift
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_b_register_by_register_big_shift",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffff3f,$000000d2,$000000d3,$00000080,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0006 ; --ZO-

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E2,$24

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffff3f,$000000d2,$000000d3,$000000ff,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0019 ; SR=EN--C

.assert_code
 ASR.B D1,D4

;===========================================

asl_w_register_by_register_big_shift
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_w_register_by_register_big_shift",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffff3f,$000000d1,$000000d2,$000000d3,$000000d4,$0000ffff,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0019 ; EN--C

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E1,$65

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffff3f,$000000d1,$000000d2,$000000d3,$000000d4,$00000000,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0006 ; SR=--ZO-

.assert_code
 ASL.W D0,D5

;===========================================

asr_w_register_by_register_big_shift
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_w_register_by_register_big_shift",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffff3f,$000000d2,$000000d3,$00008000,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0006 ; --ZO-

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E2,$64

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffff3f,$000000d2,$000000d3,$0000ffff,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0019 ; SR=EN--C

.assert_code
 ASR.W D1,D4

;===========================================

asl_l_register_by_register_big_shift
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_l_register_by_register_big_shift",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffff3f,$000000d1,$000000d2,$000000d3,$000000d4,$ffffffff,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0019 ; EN--C

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E1,$A5

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $ffffff3f,$000000d1,$000000d2,$000000d3,$000000d4,$00000000,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0006 ; SR=--ZO-

.assert_code
 ASL.L D0,D5

;===========================================

asr_l_register_by_register_big_shift
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_l_register_by_register_big_shift",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000000

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffff3f,$000000d2,$000000d3,$80000000,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $0006 ; --ZO-

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E2,$A4

.assert_mem
 ;length,address,ptr
 dc.l $00000000

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffff3f,$000000d2,$000000d3,$ffffffff,$000000d5,$000000d6,$000000d7
 dc.l $000000a0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0019 ; SR=EN--C

.assert_code
 ASR.L D1,D4

;===========================================

asl_w_memory_by_1_areg_indirect_with_predecrement
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_w_memory_by_1_areg_indirect_with_predecrement",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000002,$00050110,.arrange_mem_00050110
 dc.l $00000000

.arrange_mem_00050110
 dc.b $10,$10

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffff3f,$000000d2,$000000d3,$80000000,$000000d5,$000000d6,$000000d7
 dc.l $00050112,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E1,$E0

.assert_mem
 ;length,address,ptr
 dc.l $00000002,$00050110,.assert_mem_00050110
 dc.l $00000000

.assert_mem_00050110
 dc.b $20,$20

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffff3f,$000000d2,$000000d3,$80000000,$000000d5,$000000d6,$000000d7
 dc.l $00050110,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASL.W -(A0)

;===========================================

asl_w_memory_by_1_areg_indirect_with_displacement
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asl_w_memory_by_1_areg_indirect_with_displacement",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000002,$00050110,.arrange_mem_00050110
 dc.l $00000000

.arrange_mem_00050110
 dc.b $80,$01

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffff3f,$000000d2,$000000d3,$80000000,$000000d5,$000000d6,$000000d7
 dc.l $000500d0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.w $000c ; -NZ--

.arrange_code
 ;length,address
 dc.l $00000002,$00040000
 dc.b $E1,$E8,$00,$40

.assert_mem
 ;length,address,ptr
 dc.l $00000002,$00050110,.assert_mem_00050110
 dc.l $00000000

.assert_mem_00050110
 dc.b $00,$02

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffff3f,$000000d2,$000000d3,$80000000,$000000d5,$000000d6,$000000d7
 dc.l $000500d0,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$000000a6,$000000a7
 dc.l $00040004 ; PC
 dc.w $0013 ; SR=E--OC

.assert_code
 ASL.W ($0040,A0)

;===========================================

asr_w_memory_by_1_areg_indirect_with_postincrement
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_w_memory_by_1_areg_indirect_with_postincrement",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000002,$00050110,.arrange_mem_00050110
 dc.l $00000000

.arrange_mem_00050110
 dc.b $10,$10

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffff3f,$000000d2,$000000d3,$80000000,$000000d5,$000000d6,$000000d7
 dc.l $00050112,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$00050110,$000000a7
 dc.w $001f ; ENZOC

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E0,$DE

.assert_mem
 ;length,address,ptr
 dc.l $00000002,$00050110,.assert_mem_00050110
 dc.l $00000000

.assert_mem_00050110
 dc.b $08,$08

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffff3f,$000000d2,$000000d3,$80000000,$000000d5,$000000d6,$000000d7
 dc.l $00050112,$000000a1,$000000a2,$000000a3,$000000a4,$000000a5,$00050112,$000000a7
 dc.l $00040002 ; PC
 dc.w $0000 ; SR=-----

.assert_code
 ASR.W (A6)+

;===========================================

asr_w_memory_by_1_areg_indirect
 dc.l .name	; $00
 dc.l .arrange_mem	; $04
 dc.l .arrange_regs	; $08
 dc.l .arrange_code	; $0c
 dc.l .assert_mem	; $10
 dc.l .assert_regs	; $14
 dc.l .assert_code	; $18

.name
 dc.b "asr_w_memory_by_1_areg_indirect",0
 even

.arrange_mem
 ;length,address,ptr
 dc.l $00000002,$00050110,.arrange_mem_00050110
 dc.l $00000000

.arrange_mem_00050110
 dc.b $00,$01

.arrange_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffff3f,$000000d2,$000000d3,$80000000,$000000d5,$000000d6,$000000d7
 dc.l $000500d0,$000000a1,$000000a2,$000000a3,$000000a4,$00050110,$000000a6,$000000a7
 dc.w $000a ; -N-O-

.arrange_code
 ;length,address
 dc.l $00000001,$00040000
 dc.b $E0,$D5

.assert_mem
 ;length,address,ptr
 dc.l $00000002,$00050110,.assert_mem_00050110
 dc.l $00000000

.assert_mem_00050110
 dc.b $00,$00

.assert_regs
 ;    D0/A0     D1/A1     D2/A2     D3/A3     D4/A4     D5/A5     D6/A6     D7/A7
 dc.l $00000000,$ffffff3f,$000000d2,$000000d3,$80000000,$000000d5,$000000d6,$000000d7
 dc.l $000500d0,$000000a1,$000000a2,$000000a3,$000000a4,$00050110,$000000a6,$000000a7
 dc.l $00040002 ; PC
 dc.w $0015 ; SR=E-Z-C

.assert_code
 ASR.W (A5)


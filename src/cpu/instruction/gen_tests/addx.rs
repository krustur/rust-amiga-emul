// Path: ..\src\cpu\instruction\gen_tests\addx.rs
// This file is autogenerated from tests\addx.tests

#![allow(unused_imports)]

use std::cell::RefCell;
use std::rc::Rc;
use crate::register::ProgramCounter;
use crate::mem::rammemory::RamMemory;
use crate::cpu::instruction::GetDisassemblyResult;
use crate::mem::memory::Memory;
use crate::mem::ciamemory::CiaMemory;
use crate::cpu::Cpu;
use crate::mem::Mem;
use crate::modermodem::Modermodem;
use crate::register::STATUS_REGISTER_MASK_CARRY;
use crate::register::STATUS_REGISTER_MASK_EXTEND;
use crate::register::STATUS_REGISTER_MASK_NEGATIVE;
use crate::register::STATUS_REGISTER_MASK_OVERFLOW;
use crate::register::STATUS_REGISTER_MASK_ZERO;


#[test]
fn data_register_byte_with_extend_clear() {
    // arrange - code
    // ADDX.B D0,D1
    let code = [0xD3, 0x00].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x00000020, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.B"),
            String::from("D0,D1"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x00000030, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_byte_with_extend_set() {
    // arrange - code
    // ADDX.B D0,D1
    let code = [0xD3, 0x00].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x00000020, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.B"),
            String::from("D0,D1"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x00000031, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_byte_with_extend_set_set_carry_extend() {
    // arrange - code
    // ADDX.B D0,D1
    let code = [0xD3, 0x00].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x000000f0, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.B"),
            String::from("D0,D1"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x00000001, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_CARRY
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_byte_with_extend_set_set_carry_extend_leave_zero_cleared_test_both_carry() {
    // arrange - code
    // ADDX.B D0,D1
    let code = [0xD3, 0x00].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x0000000f, 0x000000f0, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.B"),
            String::from("D0,D1"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x0000000f, 0x00000000, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_CARRY
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_byte_with_extend_set_set_carry_extend_leave_zero_set_test_both_carry() {
    // arrange - code
    // ADDX.B D0,D1
    let code = [0xD3, 0x00].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x0000000f, 0x000000f0, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_ZERO
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.B"),
            String::from("D0,D1"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x0000000f, 0x00000000, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_CARRY
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_byte_with_extend_set_set_overflow_negative() {
    // arrange - code
    // ADDX.B D0,D1
    let code = [0xD3, 0x00].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000007f, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.B"),
            String::from("D0,D1"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x00000090, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_OVERFLOW
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_byte_with_extend_set_set_overflow_negative_test_both_overflow() {
    // arrange - code
    // ADDX.B D0,D1
    let code = [0xD3, 0x00].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.B"),
            String::from("D0,D1"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x00000080, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_OVERFLOW
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_word_with_extend_clear() {
    // arrange - code
    // ADDX.W D2,D3
    let code = [0xD7, 0x42].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001010, 0x00002020, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.W"),
            String::from("D2,D3"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001010, 0x00003030, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_word_with_extend_set() {
    // arrange - code
    // ADDX.W D2,D3
    let code = [0xD7, 0x42].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001010, 0x00002020, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.W"),
            String::from("D2,D3"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001010, 0x00003031, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_word_with_extend_set_set_carry_extend() {
    // arrange - code
    // ADDX.W D2,D3
    let code = [0xD7, 0x42].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001010, 0x0000f0f0, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.W"),
            String::from("D2,D3"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001010, 0x00000101, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_CARRY
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_word_with_extend_set_set_carry_extend_leave_zero_cleared_test_both_carry() {
    // arrange - code
    // ADDX.W D2,D3
    let code = [0xD7, 0x42].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x0000000f, 0x0000fff0, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.W"),
            String::from("D2,D3"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x0000000f, 0x00000000, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_CARRY
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_word_with_extend_set_set_carry_extend_leave_zero_set_test_both_carry() {
    // arrange - code
    // ADDX.W D2,D3
    let code = [0xD7, 0x42].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x0000000f, 0x0000fff0, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_ZERO
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.W"),
            String::from("D2,D3"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x0000000f, 0x00000000, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_CARRY
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_word_with_extend_set_set_overflow_negative() {
    // arrange - code
    // ADDX.W D2,D3
    let code = [0xD7, 0x42].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00007fff, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.W"),
            String::from("D2,D3"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00009000, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_OVERFLOW
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_word_with_extend_set_set_overflow_negative_zero_test_both_overflow() {
    // arrange - code
    // ADDX.W D2,D3
    let code = [0xD7, 0x42].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.W"),
            String::from("D2,D3"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00008000, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_OVERFLOW
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_long_with_extend_clear() {
    // arrange - code
    // ADDX.L D4,D5
    let code = [0xDB, 0x84].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10101010, 0x20202020, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.L"),
            String::from("D4,D5"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10101010, 0x30303030, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_long_with_extend_set() {
    // arrange - code
    // ADDX.L D4,D5
    let code = [0xDB, 0x84].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10101010, 0x20202020, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.L"),
            String::from("D4,D5"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10101010, 0x30303031, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_long_with_extend_set_set_carry_extend() {
    // arrange - code
    // ADDX.L D4,D5
    let code = [0xDB, 0x84].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10101010, 0xf0f0f0f0, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.L"),
            String::from("D4,D5"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10101010, 0x01010101, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_CARRY
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_long_with_extend_set_set_carry_extend_leave_zero_cleared_test_both_carry() {
    // arrange - code
    // ADDX.L D4,D5
    let code = [0xDB, 0x84].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x0000000f, 0xfffffff0, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.L"),
            String::from("D4,D5"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x0000000f, 0x00000000, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_CARRY
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_long_with_extend_set_set_carry_extend_leave_zero_cleared_set_both_carry() {
    // arrange - code
    // ADDX.L D4,D5
    let code = [0xDB, 0x84].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x0000000f, 0xfffffff0, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_ZERO
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.L"),
            String::from("D4,D5"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x0000000f, 0x00000000, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_CARRY
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_long_with_extend_set_set_overflow_negative() {
    // arrange - code
    // ADDX.L D4,D5
    let code = [0xDB, 0x84].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x7fffffff, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.L"),
            String::from("D4,D5"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x90000000, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_OVERFLOW
    );

    // assert - mem
    // -nothing-
}

#[test]
fn data_register_long_with_extend_set_set_overflow_negative_zero_test_both_overflow() {
    // arrange - code
    // ADDX.L D4,D5
    let code = [0xDB, 0x84].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x6fffffff, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.L"),
            String::from("D4,D5"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x80000000, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_OVERFLOW
    );

    // assert - mem
    // -nothing-
}

#[test]
fn address_register_byte_with_extend_clear() {
    // arrange - code
    // ADDX.B -(A3),-(A4)
    let code = [0xD9, 0x0B].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    let arrange_mem_bytes_00050002 = [0x10, 0x20].to_vec();
    let arrange_mem_00050002 = RamMemory::from_bytes(0x00050002, arrange_mem_bytes_00050002);

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    mem.add_range(Rc::new(RefCell::new(arrange_mem_00050002)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x6fffffff, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x00050003, 0x00050004, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.B"),
            String::from("-(A3),-(A4)"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x6fffffff, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x00050002, 0x00050003, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    assert_eq!(0x10, modermodem.mem.get_byte_no_log(0x00050002));
    assert_eq!(0x30, modermodem.mem.get_byte_no_log(0x00050003));
}

#[test]
fn address_register_byte_with_extend_set() {
    // arrange - code
    // ADDX.B -(A3),-(A4)
    let code = [0xD9, 0x0B].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    let arrange_mem_bytes_00050002 = [0x10, 0x20].to_vec();
    let arrange_mem_00050002 = RamMemory::from_bytes(0x00050002, arrange_mem_bytes_00050002);

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    mem.add_range(Rc::new(RefCell::new(arrange_mem_00050002)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x6fffffff, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x00050003, 0x00050004, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.B"),
            String::from("-(A3),-(A4)"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x6fffffff, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x00050002, 0x00050003, 0x000000a5, 0x000000a6, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    assert_eq!(0x10, modermodem.mem.get_byte_no_log(0x00050002));
    assert_eq!(0x31, modermodem.mem.get_byte_no_log(0x00050003));
}

#[test]
fn address_register_word_with_extend_clear() {
    // arrange - code
    // ADDX.W -(A5),-(A6)
    let code = [0xDD, 0x4D].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    let arrange_mem_bytes_00040010 = [0x10, 0x10, 0x20, 0x20].to_vec();
    let arrange_mem_00040010 = RamMemory::from_bytes(0x00040010, arrange_mem_bytes_00040010);

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    mem.add_range(Rc::new(RefCell::new(arrange_mem_00040010)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x6fffffff, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x00050003, 0x00050004, 0x00040012, 0x00040014, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.W"),
            String::from("-(A5),-(A6)"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x6fffffff, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x00050003, 0x00050004, 0x00040010, 0x00040012, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    assert_eq!(0x10, modermodem.mem.get_byte_no_log(0x00040010));
    assert_eq!(0x10, modermodem.mem.get_byte_no_log(0x00040011));
    assert_eq!(0x30, modermodem.mem.get_byte_no_log(0x00040012));
    assert_eq!(0x30, modermodem.mem.get_byte_no_log(0x00040013));
}

#[test]
fn address_register_word_with_extend_set() {
    // arrange - code
    // ADDX.W -(A5),-(A6)
    let code = [0xDD, 0x4D].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    let arrange_mem_bytes_00040010 = [0x10, 0x10, 0x20, 0x20].to_vec();
    let arrange_mem_00040010 = RamMemory::from_bytes(0x00040010, arrange_mem_bytes_00040010);

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    mem.add_range(Rc::new(RefCell::new(arrange_mem_00040010)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x6fffffff, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x00050003, 0x00050004, 0x00040012, 0x00040014, 0x000000a7);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.W"),
            String::from("-(A5),-(A6)"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x6fffffff, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0xa0a0a0a0, 0x000000a1, 0x000000a2, 0x00050003, 0x00050004, 0x00040010, 0x00040012, 0x000000a7);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    assert_eq!(0x10, modermodem.mem.get_byte_no_log(0x00040010));
    assert_eq!(0x10, modermodem.mem.get_byte_no_log(0x00040011));
    assert_eq!(0x30, modermodem.mem.get_byte_no_log(0x00040012));
    assert_eq!(0x31, modermodem.mem.get_byte_no_log(0x00040013));
}

#[test]
fn address_register_long_with_extend_clear() {
    // arrange - code
    // ADDX.L -(A7),-(A0)
    let code = [0xD1, 0x8F].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    let arrange_mem_bytes_00040010 = [0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20].to_vec();
    let arrange_mem_00040010 = RamMemory::from_bytes(0x00040010, arrange_mem_bytes_00040010);

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    mem.add_range(Rc::new(RefCell::new(arrange_mem_00040010)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x6fffffff, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x00040018, 0x000000a1, 0x000000a2, 0x00050003, 0x00050004, 0x00040014, 0x00040018, 0x00040014);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.L"),
            String::from("-(A7),-(A0)"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x6fffffff, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x00040014, 0x000000a1, 0x000000a2, 0x00050003, 0x00050004, 0x00040014, 0x00040018, 0x00040010);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    assert_eq!(0x10, modermodem.mem.get_byte_no_log(0x00040010));
    assert_eq!(0x10, modermodem.mem.get_byte_no_log(0x00040011));
    assert_eq!(0x10, modermodem.mem.get_byte_no_log(0x00040012));
    assert_eq!(0x10, modermodem.mem.get_byte_no_log(0x00040013));
    assert_eq!(0x30, modermodem.mem.get_byte_no_log(0x00040014));
    assert_eq!(0x30, modermodem.mem.get_byte_no_log(0x00040015));
    assert_eq!(0x30, modermodem.mem.get_byte_no_log(0x00040016));
    assert_eq!(0x30, modermodem.mem.get_byte_no_log(0x00040017));
}

#[test]
fn address_register_long_with_extend_set() {
    // arrange - code
    // ADDX.L -(A7),-(A0)
    let code = [0xD1, 0x8F].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    let arrange_mem_bytes_00040010 = [0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20].to_vec();
    let arrange_mem_00040010 = RamMemory::from_bytes(0x00040010, arrange_mem_bytes_00040010);

    // arrange - common
    let mut mem = Mem::new();
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    mem.add_range(Rc::new(RefCell::new(arrange_mem_00040010)));
    let cpu = Cpu::new(&mem);
    let mut modermodem = Modermodem::new(None, cpu, mem, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x6fffffff, 0x000000d6, 0x00004344);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x00040018, 0x000000a1, 0x000000a2, 0x00050003, 0x00050004, 0x00040014, 0x00040018, 0x00040014);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("ADDX.L"),
            String::from("-(A7),-(A0)"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x00000010, 0x0000006f, 0x00001000, 0x00006fff, 0x10000000, 0x6fffffff, 0x000000d6, 0x00004344);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x00040014, 0x000000a1, 0x000000a2, 0x00050003, 0x00050004, 0x00040014, 0x00040018, 0x00040010);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    assert_eq!(0x10, modermodem.mem.get_byte_no_log(0x00040010));
    assert_eq!(0x10, modermodem.mem.get_byte_no_log(0x00040011));
    assert_eq!(0x10, modermodem.mem.get_byte_no_log(0x00040012));
    assert_eq!(0x10, modermodem.mem.get_byte_no_log(0x00040013));
    assert_eq!(0x30, modermodem.mem.get_byte_no_log(0x00040014));
    assert_eq!(0x30, modermodem.mem.get_byte_no_log(0x00040015));
    assert_eq!(0x30, modermodem.mem.get_byte_no_log(0x00040016));
    assert_eq!(0x31, modermodem.mem.get_byte_no_log(0x00040017));
}

// Path: ..\src\cpu\instruction\gen_tests\eor.rs
// This file is autogenerated from tests\eor.tests

#![allow(unused_imports)]

use std::cell::RefCell;
use std::rc::Rc;
use crate::register::ProgramCounter;
use crate::mem::rammemory::RamMemory;
use crate::cpu::instruction::GetDisassemblyResult;
use crate::mem::memory::Memory;
use crate::mem::ciamemory::CiaMemory;
use crate::cpu::{Cpu, CpuSpeed};
use crate::mem::Mem;
use crate::modermodem::Modermodem;
use crate::register::STATUS_REGISTER_MASK_CARRY;
use crate::register::STATUS_REGISTER_MASK_EXTEND;
use crate::register::STATUS_REGISTER_MASK_NEGATIVE;
use crate::register::STATUS_REGISTER_MASK_OVERFLOW;
use crate::register::STATUS_REGISTER_MASK_ZERO;


#[test]
fn eor_l__data_register_to_ea__x_unaffected_still_set() {
    // arrange - code
    // EOR.L D1,($0100,A1)
    let code = [0xB3, 0xA9, 0x01, 0x00].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    let arrange_mem_bytes_00034440 = [0x11, 0x11, 0x11, 0x11, 0x11].to_vec();
    let arrange_mem_00034440 = RamMemory::from_bytes(0x00034440, arrange_mem_bytes_00034440);

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    mem.add_range(Rc::new(RefCell::new(arrange_mem_00034440)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xabababab, 0xcdcdcdcd, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x00034340, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040004,
            String::from("EOR.L"),
            String::from("D1,($0100,A1)"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xabababab, 0xcdcdcdcd, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x00034340, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // assert - mem
    assert_eq!(0x25, modermodem.mem.get_byte_no_log(0x00034440));
    assert_eq!(0x25, modermodem.mem.get_byte_no_log(0x00034441));
    assert_eq!(0x25, modermodem.mem.get_byte_no_log(0x00034442));
    assert_eq!(0x25, modermodem.mem.get_byte_no_log(0x00034443));
}

#[test]
fn eor_l__data_register_to_ea__x_unaffected_still_clear() {
    // arrange - code
    // EOR.L D1,($0100,A1)
    let code = [0xB3, 0xA9, 0x01, 0x00].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    let arrange_mem_bytes_00034440 = [0x11, 0x11, 0x11, 0x11].to_vec();
    let arrange_mem_00034440 = RamMemory::from_bytes(0x00034440, arrange_mem_bytes_00034440);

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    mem.add_range(Rc::new(RefCell::new(arrange_mem_00034440)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xabababab, 0xcdcdcdcd, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x00034340, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040004,
            String::from("EOR.L"),
            String::from("D1,($0100,A1)"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xabababab, 0xcdcdcdcd, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x00034340, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    assert_eq!(0x25, modermodem.mem.get_byte_no_log(0x00034440));
    assert_eq!(0x25, modermodem.mem.get_byte_no_log(0x00034441));
    assert_eq!(0x25, modermodem.mem.get_byte_no_log(0x00034442));
    assert_eq!(0x25, modermodem.mem.get_byte_no_log(0x00034443));
}

#[test]
fn eor_l__data_register_to_ea__n_set() {
    // arrange - code
    // EOR.L D5,D6
    let code = [0xBB, 0x86].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0x80808080, 0x40404040, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       0x0000
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.L"),
            String::from("D5,D6"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0x80808080, 0xc0c0c0c0, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_l__data_register_to_ea__n_clear() {
    // arrange - code
    // EOR.L D5,D6
    let code = [0xBB, 0x86].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0x03030303, 0x42424242, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.L"),
            String::from("D5,D6"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0x03030303, 0x41414141, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_l__data_register_to_ea__z_set() {
    // arrange - code
    // EOR.L D4,D1
    let code = [0xB9, 0x81].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x90909090, 0x56565656, 0x78787878, 0x90909090, 0x03030303, 0x42424242, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.L"),
            String::from("D4,D1"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x00000000, 0x56565656, 0x78787878, 0x90909090, 0x03030303, 0x42424242, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_ZERO
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_l__data_register_to_ea__z_clear() {
    // arrange - code
    // EOR.L D4,D1
    let code = [0xB9, 0x81].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x91909090, 0x56565656, 0x78787878, 0x90909090, 0x03030303, 0x42424242, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.L"),
            String::from("D4,D1"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x01000000, 0x56565656, 0x78787878, 0x90909090, 0x03030303, 0x42424242, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_l__data_register_to_ea__vc_clear() {
    // arrange - code
    // EOR.L D4,D1
    let code = [0xB9, 0x81].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x91909090, 0x56565656, 0x78787878, 0x90009001, 0x03030303, 0x42424242, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.L"),
            String::from("D4,D1"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x01900091, 0x56565656, 0x78787878, 0x90009001, 0x03030303, 0x42424242, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_w__data_register_to_ea__x_unaffected_still_set() {
    // arrange - code
    // EOR.W D7,D6
    let code = [0xBF, 0x46].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xabababab, 0xcdcdcdcd, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.W"),
            String::from("D7,D6"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xabababab, 0xcdcd2222, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_w__data_register_to_ea__x_unaffected_still_clear() {
    // arrange - code
    // EOR.W D7,D6
    let code = [0xBF, 0x46].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xabababab, 0xcdcdcdcd, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.W"),
            String::from("D7,D6"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xabababab, 0xcdcd2222, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_w__data_register_to_ea__n_set() {
    // arrange - code
    // EOR.W D5,D6
    let code = [0xBB, 0x46].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xabab000c, 0xcdcdc00c, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.W"),
            String::from("D5,D6"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xabab000c, 0xcdcdc000, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_w__data_register_to_ea__n_clear() {
    // arrange - code
    // EOR.W D5,D6
    let code = [0xBB, 0x46].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xabab800c, 0xcdcdc00c, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.W"),
            String::from("D5,D6"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xabab800c, 0xcdcd4000, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_w__data_register_to_ea__z_set() {
    // arrange - code
    // EOR.W D5,D6
    let code = [0xBB, 0x46].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xababc00c, 0xcdcdc00c, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.W"),
            String::from("D5,D6"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xababc00c, 0xcdcd0000, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_ZERO
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_w__data_register_to_ea__z_clear() {
    // arrange - code
    // EOR.W D5,D6
    let code = [0xBB, 0x46].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xabab8004, 0xcdcdc00c, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.W"),
            String::from("D5,D6"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xabab8004, 0xcdcd4008, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_w__data_register_to_ea__vc_clear() {
    // arrange - code
    // EOR.W D5,D6
    let code = [0xBB, 0x46].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xababffff, 0xcdcdc33c, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.W"),
            String::from("D5,D6"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xababffff, 0xcdcd3cc3, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_b__data_register_to_ea__x_unaffected_still_set() {
    // arrange - code
    // EOR.B D3,D0
    let code = [0xB7, 0x00].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xababc080, 0xcdcdc040, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.B"),
            String::from("D3,D0"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x1212126a, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xababc080, 0xcdcdc040, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_b__data_register_to_ea__x_unaffected_still_clear() {
    // arrange - code
    // EOR.B D3,D0
    let code = [0xB7, 0x00].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xababc080, 0xcdcdc040, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       0x0000
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.B"),
            String::from("D3,D0"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x1212126a, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xababc080, 0xcdcdc040, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_b__data_register_to_ea__n_set() {
    // arrange - code
    // EOR.B D5,D6
    let code = [0xBB, 0x06].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xababc080, 0xcdcdc040, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       0x0000
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.B"),
            String::from("D5,D6"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xababc080, 0xcdcdc0c0, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_b__data_register_to_ea__n_clear() {
    // arrange - code
    // EOR.B D5,D6
    let code = [0xBB, 0x06].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xababc080, 0xcdcdc0c0, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.B"),
            String::from("D5,D6"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xababc080, 0xcdcdc040, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_b__data_register_to_ea__z_set() {
    // arrange - code
    // EOR.B D3,D0
    let code = [0xB7, 0x00].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787812, 0x90909090, 0xababc080, 0xcdcdc040, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       0x0000
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.B"),
            String::from("D3,D0"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121200, 0x34343434, 0x56565656, 0x78787812, 0x90909090, 0xababc080, 0xcdcdc040, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_ZERO
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_b__data_register_to_ea__z_clear() {
    // arrange - code
    // EOR.B D3,D0
    let code = [0xB7, 0x00].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121232, 0x34343434, 0x56565656, 0x78787813, 0x90909090, 0xababc080, 0xcdcdc040, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_ZERO
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.B"),
            String::from("D3,D0"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121221, 0x34343434, 0x56565656, 0x78787813, 0x90909090, 0xababc080, 0xcdcdc040, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn eor_b__data_register_to_ea__vc_clear() {
    // arrange - code
    // EOR.B D5,D6
    let code = [0xBB, 0x06].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let mut mem = Mem::new(None, None);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    mem.add_range(Rc::new(RefCell::new(code_memory)));
    mem.add_range(Rc::new(RefCell::new(vectors)));
    mem.add_range(Rc::new(RefCell::new(cia_memory)));
    let cpu = Cpu::new(CpuSpeed::NTSC_7_159090_MHz, 0x00000000, 00040000);
    let mut modermodem = Modermodem::new(None, cpu, mem, None, None);

    // arrange - regs
    modermodem.cpu.register.set_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xababc080, 0xcdcdc040, 0xefefefef);
    modermodem.cpu.register.set_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    modermodem.cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = modermodem.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040002,
            String::from("EOR.B"),
            String::from("D5,D6"),
            ),
            get_disassembly_result
        );

    // act
    modermodem.step();

    // assert - regs
    modermodem.cpu.register.assert_all_d_reg_long_no_log(0x12121212, 0x34343434, 0x56565656, 0x78787878, 0x90909090, 0xababc080, 0xcdcdc0c0, 0xefefefef);
    modermodem.cpu.register.assert_all_a_reg_long_no_log(0x21212121, 0x43434343, 0x65656565, 0x87878787, 0x09090909, 0xbabababa, 0xdcdcdcdc, 0xfefefefe);
    modermodem.cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
    );

    // assert - mem
    // -nothing-
}

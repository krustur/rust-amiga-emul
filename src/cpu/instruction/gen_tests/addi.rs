// Path: ..\src\cpu\instruction\gen_tests\addi.rs
// This file is autogenerated from tests\addi.tests

#![allow(unused_imports)]

use crate::register::ProgramCounter;
use crate::mem::rammemory::RamMemory;
use crate::cpu::instruction::GetDisassemblyResult;
use crate::mem::memory::Memory;
use crate::mem::ciamemory::CiaMemory;
use crate::cpu::Cpu;
use crate::mem::Mem;
use crate::register::STATUS_REGISTER_MASK_CARRY;
use crate::register::STATUS_REGISTER_MASK_EXTEND;
use crate::register::STATUS_REGISTER_MASK_NEGATIVE;
use crate::register::STATUS_REGISTER_MASK_OVERFLOW;
use crate::register::STATUS_REGISTER_MASK_ZERO;


#[test]
fn addi_byte_immediate_data_to_data_register_direct() {
    // arrange - code
    // ADDI.B #$23,D7
    let code = [0x06, 0x07, 0x00, 0x23].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    // -nothing-

    // arrange - common
    let stack = RamMemory::from_range(0x01000000, 0x010003ff);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    let mut mem_ranges: Vec<Box<dyn Memory>> = Vec::new();
    mem_ranges.push(Box::new(code_memory));
    mem_ranges.push(Box::new(stack));
    mem_ranges.push(Box::new(vectors));
    mem_ranges.push(Box::new(cia_memory));
    let overlay_hack = Box::new(RamMemory::from_range(0xffffffff, 0xffffffff));
    let mem = Mem::new(mem_ranges, overlay_hack);
    let mut cpu = Cpu::new(mem);

    // arrange - regs
    cpu.register.set_all_d_reg_long_no_log(0x000000d0, 0x000000d1, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004321);
    cpu.register.set_all_a_reg_long_no_log(0x000000a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    cpu.register.set_ssp_reg(0x01000400);
    cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = cpu.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040004,
            String::from("ADDI.B"),
            String::from("#$23,D7"),
            ),
            get_disassembly_result
        );

    // act
    cpu.execute_next_instruction();

    // assert - regs
    cpu.register.assert_all_d_reg_long_no_log(0x000000d0, 0x000000d1, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x00004344);
    cpu.register.assert_all_a_reg_long_no_log(0x000000a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       0x0000
    );

    // assert - mem
    // -nothing-
}

#[test]
fn addi_byte_immediate_data_to_absolute_short() {
    // arrange - code
    // ADDI.B #$38,($4000).W
    let code = [0x06, 0x38, 0x00, 0x38, 0x40, 0x00].to_vec();
    let code_memory = RamMemory::from_bytes(0x00040000, code);

    // arrange - mem
    let arrange_mem_bytes_00004000 = [0x4C].to_vec();
    let arrange_mem_00004000 = RamMemory::from_bytes(0x00004000, arrange_mem_bytes_00004000);

    // arrange - common
    let stack = RamMemory::from_range(0x01000000, 0x010003ff);
    let vectors = RamMemory::from_range(0x00000000, 0x000003ff);
    let cia_memory = CiaMemory::new();
    let mut mem_ranges: Vec<Box<dyn Memory>> = Vec::new();
    mem_ranges.push(Box::new(code_memory));
    mem_ranges.push(Box::new(stack));
    mem_ranges.push(Box::new(vectors));
    mem_ranges.push(Box::new(cia_memory));
    mem_ranges.push(Box::new(arrange_mem_00004000));
    let overlay_hack = Box::new(RamMemory::from_range(0xffffffff, 0xffffffff));
    let mem = Mem::new(mem_ranges, overlay_hack);
    let mut cpu = Cpu::new(mem);

    // arrange - regs
    cpu.register.set_all_d_reg_long_no_log(0x000000d0, 0x000000d1, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x0000d7d7);
    cpu.register.set_all_a_reg_long_no_log(0x000000a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    cpu.register.reg_pc = ProgramCounter::from_address(0x00040000);
    cpu.register.set_ssp_reg(0x01000400);
    cpu.register.reg_sr.set_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_EXTEND
       | STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_ZERO
       | STATUS_REGISTER_MASK_OVERFLOW
       | STATUS_REGISTER_MASK_CARRY
    );

    // act/assert - disassembly
    let get_disassembly_result = cpu.get_next_disassembly_no_log();
    assert_eq!(
        GetDisassemblyResult::from_address_and_address_next(
            0x00040000,
            0x00040006,
            String::from("ADDI.B"),
            String::from("#$38,($4000).W"),
            ),
            get_disassembly_result
        );

    // act
    cpu.execute_next_instruction();

    // assert - regs
    cpu.register.assert_all_d_reg_long_no_log(0x000000d0, 0x000000d1, 0x000000d2, 0x000000d3, 0x000000d4, 0x000000d5, 0x000000d6, 0x0000d7d7);
    cpu.register.assert_all_a_reg_long_no_log(0x000000a0, 0x000000a1, 0x000000a2, 0x000000a3, 0x000000a4, 0x000000a5, 0x000000a6, 0x000000a7);
    cpu.register.reg_sr.assert_sr_reg_flags_abcde(
       STATUS_REGISTER_MASK_NEGATIVE
       | STATUS_REGISTER_MASK_OVERFLOW
    );

    // assert - mem
    assert_eq!(0x84, cpu.memory.get_byte_no_log(0x00004000));
}
